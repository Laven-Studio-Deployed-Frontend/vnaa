{"version":3,"file":"static/js/39.46f53299.chunk.js","mappings":"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","sources":["hooks/useRedux.ts","screen/Auth/Login/index.tsx","../node_modules/src/index.tsx","screen/Auth/components/SendOTP/index.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport store from \"../redux/store/store\";\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { useState } from \"react\";\nimport IMAGES from \"../../../assets\";\nimport { auth, db } from \"../../../configs/firebase.config\";\nimport { useAppDispatch } from \"../../../hooks/useRedux\";\nimport SendOTP from \"../components/SendOTP\";\nimport { authLogin } from \"../../../redux/reducers/auth\";\nimport { Spin } from \"antd\";\nimport Cookies from \"js-cookie\";\nimport { collection, doc, getDoc, getDocs, query, setDoc, where } from \"firebase/firestore\";\nimport { toast } from \"react-toastify\";\n\nconst Login = () => {\n\n  const [isPhoneNum, setIsPhoneNum] = useState('')\n  const [otp, setOtp] = useState<string>('');\n\n  const [account, setAccount] = useState<any>(null);\n  const [password, setPassword] = useState(\"\");\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isShowOTP, setIsShowOTP] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n\n  // 12/12/2003\n  const dateNow = new Date();\n  const day = dateNow.getDate();\n  const month = dateNow.getMonth() + 1;\n  const year = dateNow.getFullYear();\n\n\n  const handleLogin = async () => {\n\n    const formatPhoneNumber = `+84${isPhoneNum.slice(1)}`;\n    setIsLoading(true);\n    try {\n      // auth.settings.appVerificationDisabledForTesting = true;\n      // var recaptcha = new RecaptchaVerifier(auth, 'recaptcha-container');\n\n      const recaptcha = new RecaptchaVerifier(auth, 'recaptcha-container', {\n        'size': 'invisible',\n      })\n\n      const confirmation = await signInWithPhoneNumber(auth, formatPhoneNumber, recaptcha)\n\n      const userCollection = collection(db, \"users\");\n\n      const q = query(userCollection, where(\"myPhoneNumber\", \"==\", isPhoneNum));\n\n      const snap = await getDocs(q);\n      let failed = false;\n\n      snap.forEach((doc) => {\n        if(doc.data().myPhoneNumber === isPhoneNum) {\n          if(doc.data().password !== password) {\n            failed = true;\n          }\n        }\n      });\n      \n      if(failed) {\n        toast.error('Thông tin đăng nhập không chính xác!');\n        setIsLoading(false);\n        return;\n      }\n\n      setAccount(confirmation);\n      setIsShowOTP(true);\n      setIsLoading(false);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleVerifyOTP = async () => {\n    try {\n      const data = await account.confirm(otp);\n\n      const userDocRef = doc(db, \"users\", data.user.uid);\n      const docSnap = await getDoc(userDocRef);\n      if (!docSnap.exists()) {\n        // Chưa có doc, tạo mới\n        await setDoc(userDocRef, {\n          uid: data.user.uid,\n          myPhoneNumber: isPhoneNum,\n          status: 'new',\n          role: 'user',\n          accountCreated: `${day}/${month}/${year}`,\n        });\n      }\n\n      const balanceDocRef = doc(db, \"balance\", data.user.uid);\n      const balanceDocSnap = await getDoc(balanceDocRef);\n      if (!balanceDocSnap.exists()) {\n        // Chưa có doc, tạo mới\n        await setDoc(balanceDocRef, {\n          uid: data.user.uid,\n          balance: 0,\n          password: '',\n          status: 'active',\n          withdrawalStatus: 'unWithdrawal',\n          totalFee: 0,\n        });\n      }\n\n\n\n      dispatch(authLogin(data.user.uid))\n      Cookies.set('accessToken', data.user.accessToken, { expires: 7 });\n    } catch (error) {\n      console.log(error);\n\n    }\n  }\n\n  return (\n\n    <div className=\"w-full relative object-cover \" style={{\n      minHeight: \"100vh\"\n    }}>\n      <img className=\"fixed top-0 left-0 bottom-0 right-0 object-cover h-full w-full\" src={IMAGES.imgBg} alt=\"bg\" />\n      <div className=\"fixed top-0 left-0 bottom-0 right-0 bg-[#fffffff3] z-10 opacity-90\"></div>\n      <div className=\"absolute flex justify-center md:items-center md:h-full z-20 w-full mt-[70px]\">\n        <div className=\"w-[87%] mt-[70px] md:mt-[0px] md:w-[450px] md:top-[50%] md:border-[#04367b] mt md:rounded-[20px] md:left-[40%] md:border-[2px] md:py-[50px] md:px-[24px]\">\n          <form onSubmit={(e) => {\n            e.preventDefault();\n            handleLogin()\n          }}>\n            {\n              isShowOTP ? (\n                <SendOTP isLoading={isLoading} value={otp} onChange={setOtp} handleVerifyOTP={handleVerifyOTP} />\n              ) : (\n                <div className=\"flex flex-col justify-center items-center \">\n                  <img src={IMAGES.Logo} width={150} alt=\"logo\" />\n                  <h1 className=\"font-bold\" style={{\n                    fontSize: 18\n                  }}>\n                    Nhập tài khoản và mật khẩu để đăng nhập\n                  </h1>\n                  <input\n                    className=\"outline-none border p-3 my-3 rounded-md w-full  focus:border-sky-500\"\n                    type=\"text\"\n                    name=\"\"\n                    id=\"\"\n                    placeholder=\"Nhập số điện thoại\"\n                    value={isPhoneNum}\n                    onChange={(e) => setIsPhoneNum(e.target.value)}\n                    required\n                  />\n                  <input\n                    className=\"outline-none border p-3 my-3 rounded-md w-full  focus:border-sky-500\"\n                    type=\"password\"\n                    name=\"\"\n                    id=\"\"\n                    placeholder=\"Nhập mật khẩu\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                  />\n                  {\n                    isLoading ? (\n                      <button type=\"button\" disabled className=\"bg-[#0763c5] opacity-[0.8] text-[22px] font-bold text-white py-[6.4px] px-[15px] rounded-xl w-5/6 transition duration-150  hover:opacity-[0.6] \"\n                      >\n                        <Spin />\n                      </button>\n                    ) : (\n                      <button type=\"submit\" className=\"bg-[#0763c5] text-[22px] opacity-[0.8] font-bold text-white p-2 rounded-xl w-5/6 transition duration-150  hover:opacity-[0.6]\">\n                        Đăng nhập\n                      </button>\n                    )\n                  }\n                  <div id=\"recaptcha-container\" className=\"mt-4\"></div>\n                  <p className=\"py-3 text-[14px]\">Chưa có tài khoản ?<a href=\"/register\"><b style={{\n                    color: 'rgb(7,99,197)'\n                  }}>Đăng ký tài khoản mới</b></a></p>\n                  <img\n                    className=\"flex justify-center items-center w-[120px] \"\n                    src={IMAGES.logoCongThuong}\n                    alt=\"\"\n                  />\n                </div>\n              )\n            }\n            <div>\n              <h1 className=\"font-bold md:text-[28px] text-[22px]\">Công ty tài chính TNHH SHINHAN FINANCE</h1>\n\n              <p>\n                <span className=\"font-bold\"> Email:</span>{\" \"}\n                <span>Shinhanfinance8686@gmail.com</span>\n              </p>\n              <p>\n                <span className=\"font-bold\"> Địa chỉ: </span>\n                <span>\n                  Tầng 6, Ngọc Khánh Plaza, 1 P. Phạm Huy Thông, Ngọc Khánh, Ba Đình, Hà Nội\n                </span>\n              </p>\n\n              <div>\n                <span>\n                  ® Bản quyền thuộc về Công ty Tài chính TNHH Một thành viên Shinhan Việt Nam, thành viên của Shinhan Card (Hàn Quốc), là Công ty Tài chính tiêu dùng 100% vốn nước ngoài. Với sự kết hợp vững chắc giữa nền tảng công nghệ và các sản phẩm tài chính vượt trội của Shinhan Card cùng hơn 17 năm kinh nghiệm phát triển thị trường cho vay tiêu dùng của Công ty, Shinhan Finance cam kết nỗ lực để trở thành Công ty tài chính hỗ trợ\nKhách hàng tốt nhất Việt Nam.\n                </span>\n              </div>\n            </div>\n          </form>\n        </div>\n      </div >\n    </div >\n  );\n};\n\nexport default Login;\n","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'maxLength'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    if (!isInputValueValid(event.target.value)) {\n      // @ts-expect-error - This was added previosly to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              maxLength: 1,\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import IonIcon from '@reacticons/ionicons'\nimport React from 'react'\nimport OTPInput from 'react-otp-input'\nimport Button from '../../../../components/Button'\nimport { Spin } from 'antd'\n\ntype SendOTPProps = {\n    value: string,\n    onChange: (value: string) => void,\n    isLoading: boolean,\n    handleVerifyOTP: () => void,\n}\n\nexport default function SendOTP({ value: otp, onChange: setOtp, isLoading, handleVerifyOTP }: SendOTPProps) {\n    return (\n        <div className=\"flex flex-col items-center gap-8\">\n            <div className=\"flex justify-center items-center p-4 rounded-full border-4 border-primary\">\n                <IonIcon className=\"text-primary text-[40px]\" name=\"shield\" />\n            </div>\n            <h1 className=\"font-medium text-primary text-2xl\">Vui lòng nhập mã OTP</h1>\n            <div className=\"w-full\">\n                <OTPInput\n                    value={otp}\n                    onChange={setOtp}\n                    containerStyle={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        gap: '0.25rem',\n                        width: '100%',\n                    }}\n                    numInputs={6}\n                    renderSeparator={<span className=\"\"></span>}\n                    renderInput={(props) => <input {...props} type=\"text\" style={{\n                        width: '2em',\n                    }} className=\"border-2 border-primary text-[24px] font-medium h-[3rem] text-center rounded-md outline-none \" />}\n                />\n            </div>\n            <Button kind=\"primary\" className={`font-semibold flex items-center gap-4 w-full max-w-[20.5rem] py-3 border-2 border-transparent hover:bg-white  ${isLoading ? 'bg-white border-primary ' : 'hover:border-primary  duration-150 hover:text-primary'}`}\n                disabled={isLoading}\n                onClick={handleVerifyOTP}\n            >\n                <span className={`${isLoading && 'text-primary'}`}>Xác nhận</span>\n                {\n                    isLoading && <Spin />\n                }\n            </Button>\n        </div>\n    )\n}\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","_useState","useState","_useState2","_slicedToArray","isPhoneNum","setIsPhoneNum","_useState3","_useState4","otp","setOtp","_useState5","_useState6","account","setAccount","_useState7","_useState8","password","setPassword","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","isShowOTP","setIsShowOTP","dispatch","dateNow","Date","day","getDate","month","getMonth","year","getFullYear","handleLogin","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formatPhoneNumber","recaptcha","confirmation","userCollection","q","snap","failed","wrap","_context","prev","next","concat","slice","RecaptchaVerifier","auth","signInWithPhoneNumber","sent","collection","db","query","where","getDocs","forEach","doc","data","myPhoneNumber","toast","error","abrupt","t0","console","log","stop","apply","arguments","handleVerifyOTP","_ref2","_callee2","userDocRef","balanceDocRef","_context2","confirm","user","uid","getDoc","exists","setDoc","status","role","accountCreated","balance","withdrawalStatus","totalFee","authLogin","Cookies","set","accessToken","expires","_jsxs","className","style","minHeight","children","_jsx","src","IMAGES","imgBg","alt","onSubmit","e","preventDefault","SendOTP","value","onChange","Logo","width","fontSize","type","name","id","placeholder","target","required","disabled","Spin","href","color","logoCongThuong","isStyleObject","obj","OTPInput","_a","_b","_c","numInputs","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","focus","getPlaceholderValue","length","isInputValueValid","isNaN","Number","trim","handleChange","event","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","handleBlur","handleKeyDown","code","key","includes","index","Math","max","min","select","handleOTPChange","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","some","pos","shift","Object","assign","display","alignItems","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","maxLength","textAlign","inputMode","onInput","IonIcon","justifyContent","gap","props","_objectSpread","Button","kind","onClick"],"sourceRoot":""}