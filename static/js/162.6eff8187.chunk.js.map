{"version":3,"file":"static/js/162.6eff8187.chunk.js","mappings":"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","sources":["hooks/useRedux.ts","screen/Auth/Register/index.tsx","../node_modules/src/index.tsx","screen/Auth/components/SendOTP/index.tsx"],"sourcesContent":["import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport store from \"../redux/store/store\";\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Spin } from \"antd\";\nimport { RecaptchaVerifier, signInWithPhoneNumber } from \"firebase/auth\";\nimport { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport IMAGES from \"../../../assets\";\nimport { auth, db } from \"../../../configs/firebase.config\";\nimport { useAppDispatch } from \"../../../hooks/useRedux\";\nimport { authRegister } from \"../../../redux/reducers/auth\";\nimport SendOTP from \"../components/SendOTP\";\nimport Cookies from \"js-cookie\";\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\n\nconst Register = () => {\n\n  const [isNumber, setIsNumber] = useState<string>('');\n  const [otp, setOtp] = useState<string>('');\n  const [account, setAccount] = useState<any>(null);\n\n  const [isCheckRules, setIsCheckRules] = useState<boolean>(false);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isShowOTP, setIsShowOTP] = useState<boolean>(false);\n\n  const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n\n  const [isErrorNumber, setIsErrorNumber] = useState<boolean>(false);\n\n  const dispatch = useAppDispatch();\n\n  const regexPhoneNumber = /((09|03|07|08|05)+([0-9]{8})\\b)/g;\n\n  const dateNow = new Date();\n  const day = dateNow.getDate();\n  const month = dateNow.getMonth() + 1;\n  const year = dateNow.getFullYear();\n\n\n  const handleSendOTP = async () => {\n    if (isErrorNumber) {\n      return\n    }\n\n    if (!isCheckRules) {\n      toast.error('Vui lòng đồng ý với điều khoản dịch vụ');\n      return\n    }\n\n    if(password !== passwordConfirm) {\n      toast.error('Mật khẩu không khớp!');\n      return\n    }\n\n    try {\n      // auth.settings.appVerificationDisabledForTesting = true;\n      // var recaptcha = new RecaptchaVerifier(auth, 'recaptcha-container');\n\n      const recaptcha = new RecaptchaVerifier(auth, 'recaptcha-container', {\n        'size': 'invisible',\n      })\n      const formatPhoneNumber = `+84${isNumber.slice(1)}`;\n      const confirmation = await signInWithPhoneNumber(auth, formatPhoneNumber, recaptcha);\n\n      setAccount(confirmation);\n      setIsShowOTP(true);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  const handleVerifyOTP = async () => {\n    try {\n      const data = await account.confirm(otp);\n      const userDocRef = doc(db, \"users\", data.user.uid);\n\n      const docSnap = await getDoc(userDocRef);\n\n      if (!docSnap.exists()) {\n        // Chưa có doc, tạo mới\n        await setDoc(userDocRef, {\n          uid: data.user.uid,\n          myPhoneNumber: isNumber,\n          status: 'new',\n          role: 'user',\n          accountCreated: `${day}/${month}/${year}`,\n          password\n        });\n      }\n      dispatch(authRegister(data.user.uid))\n      // Set cookie\n      Cookies.set('accessToken', data.user.accessToken, { expires: 7 });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n\n  return (\n\n    <div className=\"w-full h-screen relative object-cover \" >\n      <img className=\"absolute top-0 left-0 bottom-0 right-0 object-cover h-full w-full bg-no-repeat bg-center\" src={IMAGES.imgBg} alt=\"bg\" />\n      <div className=\"absolute top-0 left-0 bottom-0 right-0 bg-[#fffffff3] z-10 opacity-90\"></div>\n      <div className=\"absolute flex justify-center md:items-center md:h-full z-20 w-full\">\n        <div className=\"w-[87%] mt-[70px] md:mt-[0px] md:w-[450px]  md:top-[50%] md:border-[#04367b] md:rounded-[20px] md:left-[40%] md:border-[2px] md:py-[50px] md:px-[24px]\">\n          {\n            isShowOTP ? (\n              <SendOTP isLoading={isLoading} value={otp} onChange={setOtp} handleVerifyOTP={handleVerifyOTP} />\n            ) : (\n              <div>\n                <form className=\"flex flex-col justify-center items-start \" onSubmit={(e) => {\n                  e.preventDefault()\n                  handleSendOTP()\n                }}>\n                  <img src={IMAGES.Logo} className=\"w-[6rem]\" alt=\"logo\" style={{\n                    margin: \"auto\"\n                  }} />\n                  <h1 className=\"font-bold\" style={{\n                    fontSize: 20\n                  }}>\n                    Nhập số điện thoại để đăng ký\n                  </h1>\n                  <input\n                    className=\"outline-none border p-3 my-3 rounded-md w-full  focus:border-sky-500\"\n                    type=\"text\"\n                    name=\"phoneNumber\"\n                    value={isNumber}\n                    onChange={(e) => {\n                      setIsNumber(e.target.value);\n                      if (!regexPhoneNumber.test(e.target.value)) {\n                        setIsErrorNumber(true);\n                      } else {\n                        setIsErrorNumber(false);\n                      }\n                    }}\n                    id=\"\"\n                    required\n                    placeholder=\"Nhập số điện thoại\"\n                  />\n                  {isErrorNumber && <i className=\"text-red-500 text-sm\">Số điện thoại không hợp lệ</i>}\n                  \n                  <input\n                    className=\"outline-none border p-3 my-3 rounded-md w-full  focus:border-sky-500\"\n                    type=\"password\"\n                    name=\"password\"\n                    value={password}\n                    onChange={(e) => {\n                      setPassword(e.target.value);\n                    }}\n                    id=\"\"\n                    required\n                    placeholder=\"Mật khẩu\"\n                  />\n                  <input\n                    className=\"outline-none border p-3 my-3 rounded-md w-full  focus:border-sky-500\"\n                    type=\"password\"\n                    name=\"password\"\n                    value={passwordConfirm}\n                    onChange={(e) => {\n                      setPasswordConfirm(e.target.value);\n                    }}\n                    id=\"\"\n                    required\n                    placeholder=\"Nhập lại mật khẩu\"\n                  />\n\n                  <div className=\"flex flex-col items-center w-full gap-4\">\n                    <div className=\"text-[14px] py-[8px]\"> <input type=\"checkbox\" name=\"Tôi đồng ý với điều khoản\" id=\"\"\n                      onChange={(e) => setIsCheckRules(e.target.checked)}\n                    /> <span>Tôi đồng ý với <span className=\"text-[#3592FC]\">điều khoản dịch vụ</span></span></div>\n                    <div id=\"recaptcha-container\"></div>\n\n                    {\n                      isLoading ? (\n                        <button type=\"button\" disabled className=\"bg-[#0763c5] opacity-[0.8] text-[22px] font-bold text-white py-[6.4px] px-[15px] rounded-xl w-5/6 transition duration-150  hover:opacity-[0.6] \"\n                        >\n                          <Spin />\n                        </button>\n                      ) : (\n                        <button type=\"submit\" className=\"bg-[#0763c5] opacity-[0.8] text-[22px] font-bold text-white py-[6.4px] px-[15px] rounded-xl w-5/6 transition duration-150  hover:opacity-[0.6] \"\n                        >\n                          Đăng ký\n                        </button>\n                      )\n                    }\n                    <p style={{\n                      color: \"#74788d\"\n                    }}>\n                      Độ dài mật khẩu từ 6 - 20 ký tự\n                      <br/>\n                      Ví dụ:\n                      <br/>\n                      Mật khẩu : 123456\n                    </p>\n                    <div className=\"text-[#74788d] text-[14px] py-[3px] w-full ml-[30%]\">\n                      {/* <p>Độ dài mật khẩu từ 6 - 20 ký tự</p> */}\n                      {/* <p>Ví dụ:</p> */}\n                      {/* <p>Mật khẩu : 123456</p> */}\n                    </div>\n                    <p className=\"py-3 text-[14px] \">Đã có tài khoản ?<a href=\"/login\"><b style={{\n                    color: 'rgb(7,99,197)'\n                  }}>Đăng nhập ngay</b></a></p>\n                  </div>\n                </form>\n              </div>\n            )\n          }\n        </div>\n      </div >\n    </div >\n  );\n};\n\nexport default Register;\n","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'maxLength'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    if (!isInputValueValid(event.target.value)) {\n      // @ts-expect-error - This was added previosly to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              maxLength: 1,\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import IonIcon from '@reacticons/ionicons'\nimport React from 'react'\nimport OTPInput from 'react-otp-input'\nimport Button from '../../../../components/Button'\nimport { Spin } from 'antd'\n\ntype SendOTPProps = {\n    value: string,\n    onChange: (value: string) => void,\n    isLoading: boolean,\n    handleVerifyOTP: () => void,\n}\n\nexport default function SendOTP({ value: otp, onChange: setOtp, isLoading, handleVerifyOTP }: SendOTPProps) {\n    return (\n        <div className=\"flex flex-col items-center gap-8\">\n            <div className=\"flex justify-center items-center p-4 rounded-full border-4 border-primary\">\n                <IonIcon className=\"text-primary text-[40px]\" name=\"shield\" />\n            </div>\n            <h1 className=\"font-medium text-primary text-2xl\">Vui lòng nhập mã OTP</h1>\n            <div className=\"w-full\">\n                <OTPInput\n                    value={otp}\n                    onChange={setOtp}\n                    containerStyle={{\n                        display: 'flex',\n                        justifyContent: 'center',\n                        gap: '0.25rem',\n                        width: '100%',\n                    }}\n                    numInputs={6}\n                    renderSeparator={<span className=\"\"></span>}\n                    renderInput={(props) => <input {...props} type=\"text\" style={{\n                        width: '2em',\n                    }} className=\"border-2 border-primary text-[24px] font-medium h-[3rem] text-center rounded-md outline-none \" />}\n                />\n            </div>\n            <Button kind=\"primary\" className={`font-semibold flex items-center gap-4 w-full max-w-[20.5rem] py-3 border-2 border-transparent hover:bg-white  ${isLoading ? 'bg-white border-primary ' : 'hover:border-primary  duration-150 hover:text-primary'}`}\n                disabled={isLoading}\n                onClick={handleVerifyOTP}\n            >\n                <span className={`${isLoading && 'text-primary'}`}>Xác nhận</span>\n                {\n                    isLoading && <Spin />\n                }\n            </Button>\n        </div>\n    )\n}\n"],"names":["useAppDispatch","useDispatch","useAppSelector","useSelector","_useState","useState","_useState2","_slicedToArray","isNumber","setIsNumber","_useState3","_useState4","otp","setOtp","_useState5","_useState6","account","setAccount","_useState7","_useState8","isCheckRules","setIsCheckRules","_useState9","_useState10","isLoading","_useState11","_useState12","isShowOTP","setIsShowOTP","_useState13","_useState14","password","setPassword","_useState15","_useState16","passwordConfirm","setPasswordConfirm","_useState17","_useState18","isErrorNumber","setIsErrorNumber","dispatch","regexPhoneNumber","dateNow","Date","day","getDate","month","getMonth","year","getFullYear","handleSendOTP","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","recaptcha","formatPhoneNumber","confirmation","wrap","_context","prev","next","abrupt","toast","error","RecaptchaVerifier","auth","concat","slice","signInWithPhoneNumber","sent","t0","console","log","stop","apply","arguments","handleVerifyOTP","_ref2","_callee2","data","userDocRef","_context2","confirm","doc","db","user","uid","getDoc","exists","setDoc","myPhoneNumber","status","role","accountCreated","authRegister","Cookies","set","accessToken","expires","_jsxs","className","children","_jsx","src","IMAGES","imgBg","alt","SendOTP","value","onChange","onSubmit","e","preventDefault","Logo","style","margin","fontSize","type","name","target","test","id","required","placeholder","checked","disabled","Spin","color","href","isStyleObject","obj","OTPInput","_a","_b","_c","numInputs","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","focus","getPlaceholderValue","length","isInputValueValid","isNaN","Number","trim","handleChange","event","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","handleBlur","handleKeyDown","code","key","includes","index","Math","max","min","select","handleOTPChange","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","some","pos","shift","Object","assign","display","alignItems","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","maxLength","width","textAlign","inputMode","onInput","IonIcon","justifyContent","gap","props","_objectSpread","Button","kind","onClick"],"sourceRoot":""}